module chinook.Core where

import chinook.Spark as Spark
import chinook.Utils (blank)

import Data.List (lookup)
import frege.java.Util (Set, Map)
import frege.data.Iterators (ArrayIterator)

{--
  This type is an alias for handlers used in Chinook
-}
-- tag::handler[]
type Handler = IO Request -> IO Response
-- end::handler[]

--    _____                            _
--   |  __ \                          | |
--   | |__) |___  __ _ _   _  ___  ___| |_
--   |  _  // _ \/ _` | | | |/ _ \/ __| __|
--   | | \ \  __/ (_| | |_| |  __/\__ \ |_
--   |_|  \_\___|\__, |\__,_|\___||___/\__|
--                  | |
--                  |_|

-- tag::request[]
data Request = Request { headers     :: [(String, Maybe String)],
                         queryParams :: [(String, [String])],
                         pathParams  :: [(String, String)],
                         body        :: Maybe String }
-- end::request[]

{--
   This type class is to make the access to the
   IO Request easier to the user
-}
class Requestable a where
    allHeaders :: a           -> IO [(String, Maybe String)]
    header     :: a -> String -> IO (Maybe String)
    allParams  :: a           -> IO [(String, [String])]
    params     :: a -> String -> IO (Maybe [String])
    param      :: a -> String -> IO (Maybe String)
    allPaths   :: a           -> IO [(String, String)]
    path       :: a -> String -> IO (Maybe String)
    body       :: a           -> IO (Maybe String)

{--
   Instance of Requestable to make the access to the
   IO Request more user-friendly
-}
instance Requestable (IO Request) where
    --- Retrieves all headers from a given request
    -- tag::allheaders[]
    allHeaders :: IO Request -> IO [(String, Maybe String)]
    -- end::allheaders[]
    allHeaders req = do
        request <- req
        case request of
            Request { headers, queryParams, pathParams} -> return headers
            _                                           -> return []

    --- Returns a value stored under a given header name
    -- tag::header[]
    header :: IO Request -> String -> IO (Maybe String)
    -- end::header[]
    header req name = do
        headers     <- allHeaders req
        return $ join $ lookup name headers

    -- Retrieves all query params from a given request
    allParams :: IO Request -> IO [(String, [String])]
    allParams req = do
      request  <- req
      case request of
        Request { headers, queryParams, pathParams } -> return queryParams
        _                                            -> return []

    -- Returns all param values stored under a given query param name
    params :: IO Request -> String -> IO (Maybe [String])
    params req name = lookup name <$> allParams req

    -- Returns first available value stored under a given query param name
    -- tag::param[]
    param :: IO Request -> String -> IO (Maybe String)
    -- end::param[]
    param req name = do
      all   <- params req name
      return $ fmap PreludeList.head all

    -- Returns all path params
    -- tag::allpaths[]
    allPaths :: IO Request -> IO [(String, String)]
    -- end::allpaths[]
    allPaths req = do
      request <- req
      case request of
        Request { headers, queryParams, pathParams } -> return pathParams
        _                                            -> return []

    -- Returns a specific path param by its name
    -- tag::path[]
    path :: IO Request -> String -> IO (Maybe String)
    -- end::path[]
    path req name = do
      all <- allPaths req
      return $ lookup name all

    body :: IO Request -> IO (Maybe String)
    body req = do
       request <- req
       return $ request.body

derive Show Request

--    _____
--   |  __ \
--   | |__) |___  ___ _ __   ___  _ __  ___  ___
--   |  _  // _ \/ __| '_ \ / _ \| '_ \/ __|/ _ \
--   | | \ \  __/\__ \ |_) | (_) | | | \__ \  __/
--   |_|  \_\___||___/ .__/ \___/|_| |_|___/\___|
--                   | |
--                   |_|

-- tag::response[]
data Response = Response { status  :: Int,
                           halting :: Bool,
                           output  :: Maybe String,
                           headers :: [(String, Maybe String)]} where
-- end::response[]
    -- Adds a new response header and returns a new response
    addHeader :: Response -> (String, Maybe String) -> Response
    addHeader res header = res.{ headers <- (header:) }

    -- Sets HTTP status and returns a new response
    setStatus :: Response -> Int -> Response
    setStatus res status = res.{ status = status}

    -- Sets output message and returns a new response
    setOutput :: Response -> Maybe String -> Response
    setOutput res message = res.{ output = message }

derive Show Response

-- Default response.
--tag::responseconstant[]
response = Response 200 false Nothing []
--end::responseconstant[]

haltingResponse = Response 200 true Nothing []
